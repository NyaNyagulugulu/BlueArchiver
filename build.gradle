plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
}

def rawMcVersion = project.hasProperty("mcVersion") ? project.getProperty("mcVersion") : "1_21_1"
def mcVersion = rawMcVersion.replace('_', '.')

def loaderVersion = [
        "1.20.1": "0.15.6",
        "1.20.4": "0.16.2",
        "1.21.1": "0.16.10"
][mcVersion] ?: "0.16.10"

def yarnMappings = [
        "1.20.1": "1.20.1+build.10",
        "1.20.4": "1.20.4+build.1",
        "1.21.1": "1.21.1+build.3"
][mcVersion] ?: "1.21.1+build.3"

// 支持的版本和对应fabric loader版本
def fabricApiVersion = [
        "1.20.1": "0.90.0+1.20.1",
        "1.20.4": "0.93.1+1.20.4",
        "1.21.1": "0.115.4+1.21.1"
][mcVersion] ?: "0.115.4+1.21.1"


def geckolibVersion = [
        "1.20.1": "4.4.2",
        "1.20.4": "4.6.1",
        "1.21.1": "4.7.5.1"
][mcVersion]

if (geckolibVersion == null) {
    throw new GradleException("不支持 Minecraft ${mcVersion}，请使用 GeckoLib 4 支持的版本（1.20.1+）")
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = "${project.archives_base_name}-${mcVersion}"
}

loom {
    mods {
        "bluearchive" {
            sourceSet sourceSets.main
        }
    }
}

repositories {
    mavenCentral()
    maven {
        name = "GeckoLib"
        url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${mcVersion}"
    mappings "net.fabricmc:yarn:${yarnMappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${loaderVersion}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabricApiVersion}"
    modImplementation "software.bernie.geckolib:geckolib-fabric-${mcVersion}:${geckolibVersion}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", mcVersion
    inputs.property "loader_version", loaderVersion
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": mcVersion,
                "loader_version": loaderVersion
    }
}

def targetJavaVersion = 21

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }
}
