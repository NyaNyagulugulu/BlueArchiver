name: Auto Release on Push

on:
  push:
    branches: [ "master" ]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    - name: Build with Gradle
      run: ./gradlew build --console=plain

    - name: Get current version from gradle.properties
      id: get_version
      run: |
        VERSION=$(grep "^mod_version=" gradle.properties | cut -d'=' -f2 | tr -d ' ')
        if [ -z "$VERSION" ]; then
          echo "Could not find mod_version in gradle.properties"
          exit 1
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"

    - name: Find built JAR file
      id: find_jar
      run: |
        sleep 2
        echo "Build directory contents:"
        ls -la build/ || echo "build directory not found"
        echo "Build/libs directory contents:"
        ls -la build/libs/ || echo "build/libs directory not found"
        
        JAR_FILE=$(find build/libs -name "*.jar" -not -name "*-sources.jar" 2>/dev/null | head -n 1)
        if [ -z "$JAR_FILE" ]; then
          echo "No JAR file found in build/libs"
          echo "Looking for any JAR files in build directory..."
          find build -name "*.jar" 2>/dev/null || echo "No JAR files found anywhere"
          exit 1
        fi
        echo "Found JAR file: $JAR_FILE"
        echo "JAR_FILE=$JAR_FILE" >> $GITHUB_OUTPUT
        echo "JAR_NAME=$(basename $JAR_FILE)" >> $GITHUB_OUTPUT

    - name: Check if release exists
      id: check_release
      run: |
        RELEASE_EXISTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/bluearchive" \
          | grep '"tag_name"' | wc -l)
        if [ "$RELEASE_EXISTS" -gt 0 ]; then
          echo "RELEASE_EXISTS=true" >> $GITHUB_OUTPUT
          echo "Release with tag 'bluearchive' already exists"
        else
          echo "RELEASE_EXISTS=false" >> $GITHUB_OUTPUT
          echo "No existing release with tag 'bluearchive'"
        fi

    - name: Create or Update Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: bluearchive
        name: BlueArchiver ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        files: |
          ${{ steps.find_jar.outputs.JAR_FILE }}
        body: |
          Automatic release build for version ${{ steps.get_version.outputs.VERSION }}
          
          Built with Gradle and Fabric Loom.
          Minecraft version: 1.21.1
          
          This release is automatically updated on every push to master branch.
        token: ${{ secrets.GITHUB_TOKEN }}