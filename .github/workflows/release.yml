name: Release Build

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    - name: Build with Gradle
      run: ./gradlew build --console=plain

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Find built JAR file
      id: find_jar
      run: |
        # Wait a moment for build to complete
        sleep 2
        # List all files in build directory for debugging
        echo "Build directory contents:"
        ls -la build/
        echo "Build/libs directory contents:"
        ls -la build/libs/ || echo "build/libs directory not found"
        
        # Find the main JAR file (excluding sources jar)
        JAR_FILE=$(find build/libs -name "*.jar" -not -name "*-sources.jar" 2>/dev/null | head -n 1)
        if [ -z "$JAR_FILE" ]; then
          echo "No JAR file found in build/libs"
          echo "Looking for any JAR files in build directory..."
          find build -name "*.jar" 2>/dev/null || echo "No JAR files found anywhere"
          exit 1
        fi
        echo "Found JAR file: $JAR_FILE"
        echo "JAR_FILE=$JAR_FILE" >> $GITHUB_OUTPUT
        echo "JAR_NAME=$(basename $JAR_FILE)" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        files: |
          ${{ steps.find_jar.outputs.JAR_FILE }}
        body: |
          Automatic release build for ${{ steps.get_version.outputs.VERSION }}
          
          Built with Gradle and Fabric Loom.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}